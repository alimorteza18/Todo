{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.jsx","components/TodoItem.js","components/TodoItems.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","observable","action","todoStore","lastID","todos","push","filter","todo","length","computed","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","addTodo","_this","setState","_this2","react_default","a","createElement","Fragment","className","placeholder","autofocus","onChange","target","onKeyDown","Component","TodoItem","observer","onToggle","props","toggle","_this$props","onDelete","class","type","checked","onClick","TodoItems","for","map","index","components_TodoItem","key","splice","TodoFooter","Count","App","components_TodoEntry","components_TodoItems","components_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8d07751.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\n\nexport default class TodoModel {\n    // Your code here\n    store\n    id\n    @observable title\n    @observable completed\n\n    constructor(store, title, completed, id){\n        this.title = title\n        this.completed = completed\n        this.id = id\n        this.store = store\n\n    }\n\n    @action\n    toggle(){\n        this.completed = !this.completed\n    }\n}\n","import {observable, action, computed} from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n    // Your code here\n\n    @observable todos = []\n    lastID = 0\n\n    @action\n    addTodo(title){\n        this.todos.push(new TodoModel(this, title, false, this.lastID++))\n    }\n    @computed get Count() {\n        return this.todos.filter(todo => !todo.completed).length;\n      }\n}\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, { Component } from 'react';\r\nimport todoStore from '../stores/TodoStore';\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value: \"\"\r\n    }\r\n    handleKeyDown = event => {\r\n        if (event.keyCode !== 13) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        todoStore.addTodo(this.state.value);\r\n        this.setState({\r\n            value: \"\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <header className=\"header\">\r\n                    <h1>todos</h1>\r\n                    <input className=\"new-todo\"\r\n                        value={this.state.value}\r\n                        placeholder=\"What needs to be done?\"\r\n                        autofocus\r\n                        onChange={event => this.setState({ value: event.target.value })}\r\n                        onKeyDown={\r\n                            event => this.handleKeyDown(event)\r\n                        }\r\n\r\n                    />\r\n                </header>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoEntry;","import { observer } from 'mobx-react';\r\nimport React, { Component } from 'react';\r\n@observer\r\nclass TodoItem extends Component {\r\n    onToggle = () => {\r\n        this.props.todo.toggle()\r\n    }\r\n    render() {\r\n        const { todo, onDelete } = this.props\r\n        return (\r\n            <>\r\n                <li className={todo.completed ? 'completed' : ''}>\r\n                    <div class=\"view\">\r\n                        <input className=\"toggle\" type=\"checkbox\" checked={todo.completed} onChange={this.onToggle} />\r\n                        <label>{todo.title}</label>\r\n                        <button className=\"destroy\"\r\n                            onClick={onDelete}\r\n                        ></button>\r\n                    </div>\r\n                    <input className=\"edit\" value=\"Rule the web\" />\r\n                </li>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoItem;","import { observer } from 'mobx-react';\r\nimport React, { Component } from 'react';\r\nimport todoStore from '../stores/TodoStore';\r\nimport TodoItem from './TodoItem';\r\n@observer\r\nclass TodoItems extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <section className=\"main\">\r\n                    <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\r\n                    <label for=\"toggle-all\">Mark all as complete</label>\r\n                    <ul className=\"todo-list\">\r\n                        {\r\n                            todoStore.todos.map((todo, index) => {\r\n                                return (\r\n                                    <TodoItem todo={todo}\r\n                                        key={index}\r\n                                        onDelete={() => todoStore.todos.splice(index, 1)}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoItems;","import { observer } from 'mobx-react';\r\nimport React, { Component } from 'react';\r\nimport todoStore from '../stores/TodoStore';\r\n@observer\r\nclass TodoFooter extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n\r\n                <footer className=\"footer\">\r\n                    <span className=\"todo-count\"><strong>{todoStore.Count}</strong> item left</span>\r\n                </footer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoFooter;","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css';\nimport todoStore from \"./stores/TodoStore\";\nimport TodoEntry from './components/TodoEntry';\nimport TodoItems from './components/TodoItems';\nimport TodoFooter from './components/TodoFooter';\n\n\n\n\n@observer\nclass App extends Component {\n    render() {\n        return [\n         <>\n         <section className=\"todoapp\">\n\t\t\t<TodoEntry/>\n\t\t\t<TodoItems/>\n\t\t\t<TodoFooter/>\n\t\t</section>\n         </>\n        ]\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}